// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rowMinsC
arma::vec rowMinsC(arma::mat x);
RcppExport SEXP GEEaSPU_rowMinsC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    __result = Rcpp::wrap(rowMinsC(x));
    return __result;
END_RCPP
}
// count_if
double count_if(arma::uvec x);
RcppExport SEXP GEEaSPU_count_if(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::uvec >::type x(xSEXP);
    __result = Rcpp::wrap(count_if(x));
    return __result;
END_RCPP
}
// rankC
arma::vec rankC(NumericVector x);
RcppExport SEXP GEEaSPU_rankC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    __result = Rcpp::wrap(rankC(x));
    return __result;
END_RCPP
}
// which_min
NumericVector which_min(NumericVector y, LogicalVector x);
RcppExport SEXP GEEaSPU_which_min(SEXP ySEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    __result = Rcpp::wrap(which_min(y, x));
    return __result;
END_RCPP
}
// getEigen
List getEigen(arma::mat sigma);
RcppExport SEXP GEEaSPU_getEigen(SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(getEigen(sigma));
    return __result;
END_RCPP
}
// a8
arma::mat a8(arma::mat U, int p, int k);
RcppExport SEXP GEEaSPU_a8(SEXP USEXP, SEXP pSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type U(USEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    __result = Rcpp::wrap(a8(U, p, k));
    return __result;
END_RCPP
}
// signC
double signC(double x);
RcppExport SEXP GEEaSPU_signC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    __result = Rcpp::wrap(signC(x));
    return __result;
END_RCPP
}
// rcpp_standPow
arma::vec rcpp_standPow(arma::mat U1, double power);
RcppExport SEXP GEEaSPU_rcpp_standPow(SEXP U1SEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type U1(U1SEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    __result = Rcpp::wrap(rcpp_standPow(U1, power));
    return __result;
END_RCPP
}
// InfU
arma::vec InfU(arma::mat U);
RcppExport SEXP GEEaSPU_InfU(SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type U(USEXP);
    __result = Rcpp::wrap(InfU(U));
    return __result;
END_RCPP
}
// gauss_score
arma::mat gauss_score(arma::mat invR, arma::mat G, arma::mat res, int n, int k, int p);
RcppExport SEXP GEEaSPU_gauss_score(SEXP invRSEXP, SEXP GSEXP, SEXP resSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type invR(invRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    __result = Rcpp::wrap(gauss_score(invR, G, res, n, k, p));
    return __result;
END_RCPP
}
// gauss_score_cov
List gauss_score_cov(arma::mat invR, arma::mat G, arma::mat x, arma::mat res, arma::mat covres, int n, int k, int p, int tp);
RcppExport SEXP GEEaSPU_gauss_score_cov(SEXP invRSEXP, SEXP GSEXP, SEXP xSEXP, SEXP resSEXP, SEXP covresSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pSEXP, SEXP tpSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type invR(invRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covres(covresSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type tp(tpSEXP);
    __result = Rcpp::wrap(gauss_score_cov(invR, G, x, res, covres, n, k, p, tp));
    return __result;
END_RCPP
}
// bin_score
arma::mat bin_score(arma::vec va, arma::mat invR, arma::mat G, arma::mat x, arma::mat res, arma::mat covres, int n, int k, int p, int tp);
RcppExport SEXP GEEaSPU_bin_score(SEXP vaSEXP, SEXP invRSEXP, SEXP GSEXP, SEXP xSEXP, SEXP resSEXP, SEXP covresSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pSEXP, SEXP tpSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type va(vaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invR(invRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covres(covresSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type tp(tpSEXP);
    __result = Rcpp::wrap(bin_score(va, invR, G, x, res, covres, n, k, p, tp));
    return __result;
END_RCPP
}
// bin_score_cov
List bin_score_cov(arma::vec va, arma::mat invR, arma::mat G, arma::mat x, arma::mat res, arma::mat covres, int n, int k, int p, int tp);
RcppExport SEXP GEEaSPU_bin_score_cov(SEXP vaSEXP, SEXP invRSEXP, SEXP GSEXP, SEXP xSEXP, SEXP resSEXP, SEXP covresSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pSEXP, SEXP tpSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type va(vaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invR(invRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covres(covresSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type tp(tpSEXP);
    __result = Rcpp::wrap(bin_score_cov(va, invR, G, x, res, covres, n, k, p, tp));
    return __result;
END_RCPP
}
// rcpp_spuval
arma::mat rcpp_spuval(arma::mat U, arma::mat po, arma::mat po2, int p, int k);
RcppExport SEXP GEEaSPU_rcpp_spuval(SEXP USEXP, SEXP poSEXP, SEXP po2SEXP, SEXP pSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po(poSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po2(po2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    __result = Rcpp::wrap(rcpp_spuval(U, po, po2, p, k));
    return __result;
END_RCPP
}
// perm
List perm(arma::mat invR, arma::mat G, arma::mat res, int n, int k, int p, arma::mat po, arma::mat po2, int nperm);
RcppExport SEXP GEEaSPU_perm(SEXP invRSEXP, SEXP GSEXP, SEXP resSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pSEXP, SEXP poSEXP, SEXP po2SEXP, SEXP npermSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type invR(invRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po(poSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po2(po2SEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    __result = Rcpp::wrap(perm(invR, G, res, n, k, p, po, po2, nperm));
    return __result;
END_RCPP
}
// perm_score
List perm_score(arma::mat invR, arma::mat G, arma::mat x, arma::mat res, arma::mat covres, int n, int k, int p, int tp, arma::mat po, arma::mat po2, int nperm);
RcppExport SEXP GEEaSPU_perm_score(SEXP invRSEXP, SEXP GSEXP, SEXP xSEXP, SEXP resSEXP, SEXP covresSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pSEXP, SEXP tpSEXP, SEXP poSEXP, SEXP po2SEXP, SEXP npermSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type invR(invRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covres(covresSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type tp(tpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po(poSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po2(po2SEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    __result = Rcpp::wrap(perm_score(invR, G, x, res, covres, n, k, p, tp, po, po2, nperm));
    return __result;
END_RCPP
}
// permhigh
List permhigh(arma::mat invR, arma::mat G, arma::mat res, int n, int k, int p, arma::mat po, arma::mat po2, int nperm);
RcppExport SEXP GEEaSPU_permhigh(SEXP invRSEXP, SEXP GSEXP, SEXP resSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pSEXP, SEXP poSEXP, SEXP po2SEXP, SEXP npermSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type invR(invRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po(poSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po2(po2SEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    __result = Rcpp::wrap(permhigh(invR, G, res, n, k, p, po, po2, nperm));
    return __result;
END_RCPP
}
// permhigh_score
List permhigh_score(arma::mat invR, arma::mat G, arma::mat x, arma::mat res, arma::mat covres, int n, int k, int p, int tp, arma::mat po, arma::mat po2, int nperm);
RcppExport SEXP GEEaSPU_permhigh_score(SEXP invRSEXP, SEXP GSEXP, SEXP xSEXP, SEXP resSEXP, SEXP covresSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pSEXP, SEXP tpSEXP, SEXP poSEXP, SEXP po2SEXP, SEXP npermSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type invR(invRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covres(covresSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type tp(tpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po(poSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po2(po2SEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    __result = Rcpp::wrap(permhigh_score(invR, G, x, res, covres, n, k, p, tp, po, po2, nperm));
    return __result;
END_RCPP
}
// sim
List sim(int f, arma::vec va, arma::mat invR, arma::mat G, arma::mat x, arma::mat res, arma::mat covres, int n, int k, int p, int tp, arma::mat po, arma::mat po2, int nsim);
RcppExport SEXP GEEaSPU_sim(SEXP fSEXP, SEXP vaSEXP, SEXP invRSEXP, SEXP GSEXP, SEXP xSEXP, SEXP resSEXP, SEXP covresSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pSEXP, SEXP tpSEXP, SEXP poSEXP, SEXP po2SEXP, SEXP nsimSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type va(vaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invR(invRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covres(covresSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type tp(tpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po(poSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po2(po2SEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    __result = Rcpp::wrap(sim(f, va, invR, G, x, res, covres, n, k, p, tp, po, po2, nsim));
    return __result;
END_RCPP
}
// sim_score
List sim_score(int f, arma::vec va, arma::mat invR, arma::mat G, arma::mat x, arma::mat res, arma::mat covres, int n, int k, int p, int tp, arma::mat po, arma::mat po2, int nsim);
RcppExport SEXP GEEaSPU_sim_score(SEXP fSEXP, SEXP vaSEXP, SEXP invRSEXP, SEXP GSEXP, SEXP xSEXP, SEXP resSEXP, SEXP covresSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pSEXP, SEXP tpSEXP, SEXP poSEXP, SEXP po2SEXP, SEXP nsimSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type va(vaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invR(invRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covres(covresSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type tp(tpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po(poSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po2(po2SEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    __result = Rcpp::wrap(sim_score(f, va, invR, G, x, res, covres, n, k, p, tp, po, po2, nsim));
    return __result;
END_RCPP
}
// simhigh
List simhigh(int f, arma::vec va, arma::mat invR, arma::mat G, arma::mat x, arma::mat res, arma::mat covres, int n, int k, int p, int tp, arma::mat po, arma::mat po2, int nperm);
RcppExport SEXP GEEaSPU_simhigh(SEXP fSEXP, SEXP vaSEXP, SEXP invRSEXP, SEXP GSEXP, SEXP xSEXP, SEXP resSEXP, SEXP covresSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pSEXP, SEXP tpSEXP, SEXP poSEXP, SEXP po2SEXP, SEXP npermSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type va(vaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invR(invRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covres(covresSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type tp(tpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po(poSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po2(po2SEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    __result = Rcpp::wrap(simhigh(f, va, invR, G, x, res, covres, n, k, p, tp, po, po2, nperm));
    return __result;
END_RCPP
}
// simhigh_score
List simhigh_score(int f, arma::vec va, arma::mat invR, arma::mat G, arma::mat x, arma::mat res, arma::mat covres, int n, int k, int p, int tp, arma::mat po, arma::mat po2, int nperm);
RcppExport SEXP GEEaSPU_simhigh_score(SEXP fSEXP, SEXP vaSEXP, SEXP invRSEXP, SEXP GSEXP, SEXP xSEXP, SEXP resSEXP, SEXP covresSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pSEXP, SEXP tpSEXP, SEXP poSEXP, SEXP po2SEXP, SEXP npermSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type va(vaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invR(invRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covres(covresSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type tp(tpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po(poSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po2(po2SEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    __result = Rcpp::wrap(simhigh_score(f, va, invR, G, x, res, covres, n, k, p, tp, po, po2, nperm));
    return __result;
END_RCPP
}
// pathval
arma::mat pathval(arma::mat out, int k, arma::vec nSNPs, int nGenes, arma::mat po, arma::mat po2, arma::mat po3);
RcppExport SEXP GEEaSPU_pathval(SEXP outSEXP, SEXP kSEXP, SEXP nSNPsSEXP, SEXP nGenesSEXP, SEXP poSEXP, SEXP po2SEXP, SEXP po3SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type out(outSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nSNPs(nSNPsSEXP);
    Rcpp::traits::input_parameter< int >::type nGenes(nGenesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po(poSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po2(po2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po3(po3SEXP);
    __result = Rcpp::wrap(pathval(out, k, nSNPs, nGenes, po, po2, po3));
    return __result;
END_RCPP
}
// permpath
List permpath(arma::mat invR, arma::mat G, arma::mat res, arma::vec nSNPs, int nGenes, int n, int k, int p, arma::mat po, arma::mat po2, arma::mat po3, int nperm);
RcppExport SEXP GEEaSPU_permpath(SEXP invRSEXP, SEXP GSEXP, SEXP resSEXP, SEXP nSNPsSEXP, SEXP nGenesSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pSEXP, SEXP poSEXP, SEXP po2SEXP, SEXP po3SEXP, SEXP npermSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type invR(invRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nSNPs(nSNPsSEXP);
    Rcpp::traits::input_parameter< int >::type nGenes(nGenesSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po(poSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po2(po2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type po3(po3SEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    __result = Rcpp::wrap(permpath(invR, G, res, nSNPs, nGenes, n, k, p, po, po2, po3, nperm));
    return __result;
END_RCPP
}
